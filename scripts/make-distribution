#!/bin/bash

if [ ! -f VERSION ]; then
  echo "ERROR: must be executed from top directory"
  exit 1
fi

version=`cat VERSION`
pdf_build_dir=build.pdf
PUBLIC="ec:/home/swipl/web/download/devel"

build_pdf()
{ rm -rf build.pdf
  mkdir build.pdf
  ( cd build.pdf
    cmake -DBUILD_PDF_DOCUMENTATION=ON -G Ninja ..
    ninja
  )
}

# Disabled profile guide optimization for Windows as it is broken
# in recent Ubuntu releases.  Linking the instrumented binary fails
# due to a missing symbols in libgcov.a

build_win32()
{ rm -rf build.win32
  mkdir build.win32
  ( cd build.win32
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=../cmake/cross/linux_win32.cmake \
	  -DJAVA_COMPATIBILITY=ON \
          -G Ninja ..
#   ../scripts/pgo-compile.sh
    ninja
    cpack
  )
}

build_win64()
{ rm -rf build.win64
  mkdir build.win64
  ( cd build.win64
    cmake -DCMAKE_BUILD_TYPE=Release \
	  -DJAVA_HOME="$HOME/.wine/drive_c/Program Files/Java/jdk-13.0.2" \
          -DCMAKE_TOOLCHAIN_FILE=../cmake/cross/linux_win64.cmake \
	  -DJAVA_COMPATIBILITY=ON \
          -G Ninja ..
#   ../scripts/pgo-compile.sh
    ninja
    cpack
  )
}

build_macosx()
{ rm -rf build.macosx
  mkdir build.macosx
  ( cd build.macosx
    export PATH=$HOME/deps/bin:$PATH
    MACOSX_DEPLOYMENT_TARGET=10.12 \
	cmake -DCMAKE_BUILD_TYPE=Release \
	      -DMACOSX_DEPENDENCIES_FROM=$HOME/deps \
              -DBUILD_MACOS_BUNDLE=ON \
	      -DJAVA_COMPATIBILITY=ON \
	      -G Ninja ..
    ninja
    cpack
  )
}


# Use gcc 9 from Macport `port install gcc9`
build_macosx_gcc()
{ rm -rf build.macosx-gcc
  mkdir build.macosx-gcc
  ( cd build.macosx-gcc
    export PATH=$HOME/deps/bin:$PATH
    export CC=gcc-mp-9
    MACOSX_DEPLOYMENT_TARGET=10.12 \
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DMACOSX_DEPENDENCIES_FROM=$HOME/deps \
              -DBUILD_MACOS_BUNDLE=ON \
              -DJAVA_COMPATIBILITY=ON \
              -G Ninja ..
    ../scripts/pgo-compile.sh
    ninja
    cpack
  )
}

build_source()
{ ./scripts/make-src-tape
}

build_PPAs()
{ git branch -D ppa || true
  git checkout -b ppa
  for distro in xenial bionic disco eoan focal; do
    ./scripts/make-ppa --distro=$distro --push
  done
  git checkout master
  git submodule update debian
}

build()
{ if [ $(uname) = Darwin ]; then
    build_macosx_gcc
  else
    build_pdf
    build_win32
    build_win64
    build_source
    build_PPAs
  fi
}

################
# Uploading

upload_file()
{ if [ -f "$2" ]; then
    rsync -Pvu "$2" ${PUBLIC}/$1
  fi
}

upload_win32()
{ upload_file bin build.win32/swipl-${version}-1.x86.exe
}

upload_win64()
{ upload_file bin build.win64/swipl-${version}-1.x64.exe
}

upload_macosx()
{ if [ -f build.macosx-gcc/swipl-${version}-1.x86_64.dmg ]; then
    echo "Uploading fast GCC version"
    upload_file bin build.macosx-gcc/swipl-${version}-1.x86_64.dmg
  else
    echo "WARNING: uploading slow Clang version"
    upload_file bin build.macosx/swipl-${version}-1.x86_64.dmg
  fi
}

upload_pdf()
{ upload_file doc build.pdf/man/SWI-Prolog-$version.pdf
}

upload_src()
{ upload_file src ../swipl-$version.tar.gz
}

upload()
{ if [ $(uname) = Darwin ]; then
    upload_macosx
  else
    upload_win32
    upload_win64
    upload_pdf
    upload_src
  fi
}
